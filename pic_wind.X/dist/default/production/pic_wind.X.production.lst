

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sun Mar 02 17:23:55 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F2431
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
    13                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    16   000000                     
    17                           ; Generated 17/10/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F2431 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51   000FE0                     bsr             equ	4064
    52   000FE9                     fsr0            equ	4073
    53   000FEA                     fsr0h           equ	4074
    54   000FE9                     fsr0l           equ	4073
    55   000FE1                     fsr1            equ	4065
    56   000FE2                     fsr1h           equ	4066
    57   000FE1                     fsr1l           equ	4065
    58   000FD9                     fsr2            equ	4057
    59   000FDA                     fsr2h           equ	4058
    60   000FD9                     fsr2l           equ	4057
    61   000FEF                     indf0           equ	4079
    62   000FE7                     indf1           equ	4071
    63   000FDF                     indf2           equ	4063
    64   000FF2                     intcon          equ	4082
    65   000000                     nvmcon          equ	0
    66   000FF9                     pcl             equ	4089
    67   000FFA                     pclath          equ	4090
    68   000FFB                     pclatu          equ	4091
    69   000FEB                     plusw0          equ	4075
    70   000FE3                     plusw1          equ	4067
    71   000FDB                     plusw2          equ	4059
    72   000FED                     postdec0        equ	4077
    73   000FE5                     postdec1        equ	4069
    74   000FDD                     postdec2        equ	4061
    75   000FEE                     postinc0        equ	4078
    76   000FE6                     postinc1        equ	4070
    77   000FDE                     postinc2        equ	4062
    78   000FEC                     preinc0         equ	4076
    79   000FE4                     preinc1         equ	4068
    80   000FDC                     preinc2         equ	4060
    81   000FF3                     prod            equ	4083
    82   000FF4                     prodh           equ	4084
    83   000FF3                     prodl           equ	4083
    84   000FD8                     status          equ	4056
    85   000FF5                     tablat          equ	4085
    86   000FF6                     tblptr          equ	4086
    87   000FF7                     tblptrh         equ	4087
    88   000FF6                     tblptrl         equ	4086
    89   000FF8                     tblptru         equ	4088
    90   000FFD                     tosl            equ	4093
    91   000FE8                     wreg            equ	4072
    92   000F60                     DFLTCON         equ	3936	;# 
    93   000F61                     CAP3CON         equ	3937	;# 
    94   000F62                     CAP2CON         equ	3938	;# 
    95   000F63                     CAP1CON         equ	3939	;# 
    96   000F64                     CAP3BUFL        equ	3940	;# 
    97   000F64                     MAXCNTL         equ	3940	;# 
    98   000F65                     CAP3BUFH        equ	3941	;# 
    99   000F65                     MAXCNTH         equ	3941	;# 
   100   000F66                     CAP2BUFL        equ	3942	;# 
   101   000F66                     POSCNTL         equ	3942	;# 
   102   000F67                     CAP2BUFH        equ	3943	;# 
   103   000F67                     POSCNTH         equ	3943	;# 
   104   000F68                     CAP1BUFL        equ	3944	;# 
   105   000F68                     VELRL           equ	3944	;# 
   106   000F69                     CAP1BUFH        equ	3945	;# 
   107   000F69                     VELRH           equ	3945	;# 
   108   000F6A                     OVDCONS         equ	3946	;# 
   109   000F6B                     OVDCOND         equ	3947	;# 
   110   000F6C                     FLTCONFIG       equ	3948	;# 
   111   000F6D                     DTCON           equ	3949	;# 
   112   000F6E                     PWMCON1         equ	3950	;# 
   113   000F6F                     PWMCON0         equ	3951	;# 
   114   000F70                     SEVTCMPH        equ	3952	;# 
   115   000F71                     SEVTCMPL        equ	3953	;# 
   116   000F74                     PDC2H           equ	3956	;# 
   117   000F75                     PDC2L           equ	3957	;# 
   118   000F76                     PDC1H           equ	3958	;# 
   119   000F77                     PDC1L           equ	3959	;# 
   120   000F78                     PDC0H           equ	3960	;# 
   121   000F79                     PDC0L           equ	3961	;# 
   122   000F7A                     PTPERH          equ	3962	;# 
   123   000F7B                     PTPERL          equ	3963	;# 
   124   000F7C                     PTMRH           equ	3964	;# 
   125   000F7D                     PTMRL           equ	3965	;# 
   126   000F7E                     PTCON1          equ	3966	;# 
   127   000F7F                     PTCON0          equ	3967	;# 
   128   000F80                     PORTA           equ	3968	;# 
   129   000F81                     PORTB           equ	3969	;# 
   130   000F82                     PORTC           equ	3970	;# 
   131   000F84                     PORTE           equ	3972	;# 
   132   000F87                     TMR5            equ	3975	;# 
   133   000F87                     TMR5L           equ	3975	;# 
   134   000F88                     TMR5H           equ	3976	;# 
   135   000F89                     LATA            equ	3977	;# 
   136   000F8A                     LATB            equ	3978	;# 
   137   000F8B                     LATC            equ	3979	;# 
   138   000F90                     PR5             equ	3984	;# 
   139   000F90                     PR5L            equ	3984	;# 
   140   000F91                     PR5H            equ	3985	;# 
   141   000F92                     TRISA           equ	3986	;# 
   142   000F92                     DDRA            equ	3986	;# 
   143   000F93                     TRISB           equ	3987	;# 
   144   000F93                     DDRB            equ	3987	;# 
   145   000F94                     TRISC           equ	3988	;# 
   146   000F94                     DDRC            equ	3988	;# 
   147   000F99                     ADCHS           equ	3993	;# 
   148   000F9A                     ADCON3          equ	3994	;# 
   149   000F9B                     OSCTUNE         equ	3995	;# 
   150   000F9D                     PIE1            equ	3997	;# 
   151   000F9E                     PIR1            equ	3998	;# 
   152   000F9F                     IPR1            equ	3999	;# 
   153   000FA0                     PIE2            equ	4000	;# 
   154   000FA1                     PIR2            equ	4001	;# 
   155   000FA2                     IPR2            equ	4002	;# 
   156   000FA3                     PIE3            equ	4003	;# 
   157   000FA4                     PIR3            equ	4004	;# 
   158   000FA5                     IPR3            equ	4005	;# 
   159   000FA6                     EECON1          equ	4006	;# 
   160   000FA7                     EECON2          equ	4007	;# 
   161   000FA8                     EEDATA          equ	4008	;# 
   162   000FA9                     EEADR           equ	4009	;# 
   163   000FAA                     BAUDCON         equ	4010	;# 
   164   000FAA                     BAUDCTL         equ	4010	;# 
   165   000FAB                     RCSTA           equ	4011	;# 
   166   000FAB                     RCSTA1          equ	4011	;# 
   167   000FAC                     TXSTA           equ	4012	;# 
   168   000FAC                     TXSTA1          equ	4012	;# 
   169   000FAD                     TXREG           equ	4013	;# 
   170   000FAD                     TXREG1          equ	4013	;# 
   171   000FAE                     RCREG           equ	4014	;# 
   172   000FAE                     RCREG1          equ	4014	;# 
   173   000FAF                     SPBRG           equ	4015	;# 
   174   000FAF                     SPBRG1          equ	4015	;# 
   175   000FB0                     SPBRGH          equ	4016	;# 
   176   000FB6                     QEICON          equ	4022	;# 
   177   000FB7                     T5CON           equ	4023	;# 
   178   000FB8                     ANSEL0          equ	4024	;# 
   179   000FBA                     CCP2CON         equ	4026	;# 
   180   000FBB                     CCPR2           equ	4027	;# 
   181   000FBB                     CCPR2L          equ	4027	;# 
   182   000FBC                     CCPR2H          equ	4028	;# 
   183   000FBD                     CCP1CON         equ	4029	;# 
   184   000FBE                     CCPR1           equ	4030	;# 
   185   000FBE                     CCPR1L          equ	4030	;# 
   186   000FBF                     CCPR1H          equ	4031	;# 
   187   000FC0                     ADCON2          equ	4032	;# 
   188   000FC1                     ADCON1          equ	4033	;# 
   189   000FC2                     ADCON0          equ	4034	;# 
   190   000FC3                     ADRES           equ	4035	;# 
   191   000FC3                     ADRESL          equ	4035	;# 
   192   000FC4                     ADRESH          equ	4036	;# 
   193   000FC6                     SSPCON          equ	4038	;# 
   194   000FC6                     SSPCON1         equ	4038	;# 
   195   000FC7                     SSPSTAT         equ	4039	;# 
   196   000FC8                     SSPADD          equ	4040	;# 
   197   000FC9                     SSPBUF          equ	4041	;# 
   198   000FCA                     T2CON           equ	4042	;# 
   199   000FCB                     PR2             equ	4043	;# 
   200   000FCB                     MEMCON          equ	4043	;# 
   201   000FCC                     TMR2            equ	4044	;# 
   202   000FCD                     T1CON           equ	4045	;# 
   203   000FCE                     TMR1            equ	4046	;# 
   204   000FCE                     TMR1L           equ	4046	;# 
   205   000FCF                     TMR1H           equ	4047	;# 
   206   000FD0                     RCON            equ	4048	;# 
   207   000FD1                     WDTCON          equ	4049	;# 
   208   000FD2                     LVDCON          equ	4050	;# 
   209   000FD3                     OSCCON          equ	4051	;# 
   210   000FD5                     T0CON           equ	4053	;# 
   211   000FD6                     TMR0            equ	4054	;# 
   212   000FD6                     TMR0L           equ	4054	;# 
   213   000FD7                     TMR0H           equ	4055	;# 
   214   000FD8                     STATUS          equ	4056	;# 
   215   000FD9                     FSR2            equ	4057	;# 
   216   000FD9                     FSR2L           equ	4057	;# 
   217   000FDA                     FSR2H           equ	4058	;# 
   218   000FDB                     PLUSW2          equ	4059	;# 
   219   000FDC                     PREINC2         equ	4060	;# 
   220   000FDD                     POSTDEC2        equ	4061	;# 
   221   000FDE                     POSTINC2        equ	4062	;# 
   222   000FDF                     INDF2           equ	4063	;# 
   223   000FE0                     BSR             equ	4064	;# 
   224   000FE1                     FSR1            equ	4065	;# 
   225   000FE1                     FSR1L           equ	4065	;# 
   226   000FE2                     FSR1H           equ	4066	;# 
   227   000FE3                     PLUSW1          equ	4067	;# 
   228   000FE4                     PREINC1         equ	4068	;# 
   229   000FE5                     POSTDEC1        equ	4069	;# 
   230   000FE6                     POSTINC1        equ	4070	;# 
   231   000FE7                     INDF1           equ	4071	;# 
   232   000FE8                     WREG            equ	4072	;# 
   233   000FE9                     FSR0            equ	4073	;# 
   234   000FE9                     FSR0L           equ	4073	;# 
   235   000FEA                     FSR0H           equ	4074	;# 
   236   000FEB                     PLUSW0          equ	4075	;# 
   237   000FEC                     PREINC0         equ	4076	;# 
   238   000FED                     POSTDEC0        equ	4077	;# 
   239   000FEE                     POSTINC0        equ	4078	;# 
   240   000FEF                     INDF0           equ	4079	;# 
   241   000FF0                     INTCON3         equ	4080	;# 
   242   000FF1                     INTCON2         equ	4081	;# 
   243   000FF2                     INTCON          equ	4082	;# 
   244   000FF3                     PROD            equ	4083	;# 
   245   000FF3                     PRODL           equ	4083	;# 
   246   000FF4                     PRODH           equ	4084	;# 
   247   000FF5                     TABLAT          equ	4085	;# 
   248   000FF6                     TBLPTR          equ	4086	;# 
   249   000FF6                     TBLPTRL         equ	4086	;# 
   250   000FF7                     TBLPTRH         equ	4087	;# 
   251   000FF8                     TBLPTRU         equ	4088	;# 
   252   000FF9                     PCLAT           equ	4089	;# 
   253   000FF9                     PC              equ	4089	;# 
   254   000FF9                     PCL             equ	4089	;# 
   255   000FFA                     PCLATH          equ	4090	;# 
   256   000FFB                     PCLATU          equ	4091	;# 
   257   000FFC                     STKPTR          equ	4092	;# 
   258   000FFD                     TOS             equ	4093	;# 
   259   000FFD                     TOSL            equ	4093	;# 
   260   000FFE                     TOSH            equ	4094	;# 
   261   000FFF                     TOSU            equ	4095	;# 
   262   000FC2                     _ADCON0         set	4034
   263   000F81                     _PORTBbits      set	3969
   264   000F8A                     _LATBbits       set	3978
   265   000F93                     _TRISBbits      set	3987
   266                           
   267                           ; #config settings
   268                           
   269                           	psect	cinit
   270   0004B4                     __pcinit:
   271                           	callstack 0
   272   0004B4                     start_initialization:
   273                           	callstack 0
   274   0004B4                     __initialization:
   275                           	callstack 0
   276                           
   277                           ; Clear objects allocated to COMRAM (8 bytes)
   278   0004B4  EE00  F00B         	lfsr	0,__pbssCOMRAM
   279   0004B8  0E08               	movlw	8
   280   0004BA                     clear_0:
   281   0004BA  6AEE               	clrf	postinc0,c
   282   0004BC  06E8               	decf	wreg,f,c
   283   0004BE  E1FD               	bnz	clear_0
   284   0004C0                     end_of_initialization:
   285                           	callstack 0
   286   0004C0                     __end_of__initialization:
   287                           	callstack 0
   288   0004C0  0100               	movlb	0
   289   0004C2  EF81  F001         	goto	_main	;jump to C main() function
   290                           
   291                           	psect	bssCOMRAM
   292   00000B                     __pbssCOMRAM:
   293                           	callstack 0
   294   00000B                     _TEMP:
   295                           	callstack 0
   296   00000B                     	ds	1
   297   00000C                     _RH:
   298                           	callstack 0
   299   00000C                     	ds	1
   300   00000D                     _sum:
   301                           	callstack 0
   302   00000D                     	ds	1
   303   00000E                     _rh_byte2:
   304                           	callstack 0
   305   00000E                     	ds	1
   306   00000F                     _rh_byte1:
   307                           	callstack 0
   308   00000F                     	ds	1
   309   000010                     _t_byte2:
   310                           	callstack 0
   311   000010                     	ds	1
   312   000011                     _t_byte1:
   313                           	callstack 0
   314   000011                     	ds	1
   315   000012                     _check:
   316                           	callstack 0
   317   000012                     	ds	1
   318                           
   319                           	psect	cstackCOMRAM
   320   000001                     __pcstackCOMRAM:
   321                           	callstack 0
   322   000001                     ??_start_DHT11:
   323   000001                     ??_read_dht11:
   324                           
   325                           ; 1 bytes @ 0x0
   326   000001                     	ds	2
   327   000003                     read_dht11@data:
   328                           	callstack 0
   329                           
   330                           ; 1 bytes @ 0x2
   331   000003                     	ds	1
   332   000004                     read_dht11@for_count:
   333                           	callstack 0
   334                           
   335                           ; 1 bytes @ 0x3
   336   000004                     	ds	1
   337   000005                     ??_main:
   338                           
   339                           ; 1 bytes @ 0x4
   340   000005                     	ds	4
   341   000009                     main@temp1:
   342                           	callstack 0
   343                           
   344                           ; 2 bytes @ 0x8
   345   000009                     	ds	2
   346                           
   347 ;;
   348 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   349 ;;
   350 ;; *************** function _main *****************
   351 ;; Defined at:
   352 ;;		line 137 in file "main.c"
   353 ;; Parameters:    Size  Location     Type
   354 ;;		None
   355 ;; Auto vars:     Size  Location     Type
   356 ;;  temp1           2    8[COMRAM] int 
   357 ;; Return value:  Size  Location     Type
   358 ;;                  1    wreg      void 
   359 ;; Registers used:
   360 ;;		wreg, status,2, status,0, cstack
   361 ;; Tracked objects:
   362 ;;		On entry : 0/0
   363 ;;		On exit  : 0/0
   364 ;;		Unchanged: 0/0
   365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   366 ;;      Params:         0       0       0       0
   367 ;;      Locals:         2       0       0       0
   368 ;;      Temps:          4       0       0       0
   369 ;;      Totals:         6       0       0       0
   370 ;;Total ram usage:        6 bytes
   371 ;; Hardware stack levels required when called: 1
   372 ;; This function calls:
   373 ;;		_check_DHT11
   374 ;;		_read_dht11
   375 ;;		_start_DHT11
   376 ;; This function is called by:
   377 ;;		Startup code after reset
   378 ;; This function uses a non-reentrant model
   379 ;;
   380                           
   381                           	psect	text0
   382   000302                     __ptext0:
   383                           	callstack 0
   384   000302                     _main:
   385                           	callstack 30
   386   000302                     
   387                           ;main.c: 139:     ADCON0 = 0x00;
   388   000302  6AC2               	clrf	194,c	;volatile
   389                           
   390                           ;main.c: 141:     TRISBbits.TRISB4 = 0;
   391   000304  9893               	bcf	147,4,c	;volatile
   392                           
   393                           ;main.c: 142:     TRISBbits.TRISB0 = 0;
   394   000306  9093               	bcf	147,0,c	;volatile
   395   000308                     l781:
   396                           
   397                           ;main.c: 147:     {;main.c: 148:         start_DHT11();
   398   000308  EC4A  F002         	call	_start_DHT11	;wreg free
   399   00030C                     
   400                           ;main.c: 149:         check_DHT11();
   401   00030C  EC2C  F002         	call	_check_DHT11	;wreg free
   402   000310                     
   403                           ;main.c: 150:         if(check == 1)
   404   000310  0412               	decf	_check^0,w,c
   405   000312  A4D8               	btfss	status,2,c
   406   000314  EF8E  F001         	goto	u91
   407   000318  EF90  F001         	goto	u90
   408   00031C                     u91:
   409   00031C  EFC5  F001         	goto	l793
   410   000320                     u90:
   411   000320                     
   412                           ;main.c: 151:         {;main.c: 152:             rh_byte1 = read_dht11();
   413   000320  ECE6  F001         	call	_read_dht11	;wreg free
   414   000324  6E0F               	movwf	_rh_byte1^0,c
   415                           
   416                           ;main.c: 153:             rh_byte2 = read_dht11();
   417   000326  ECE6  F001         	call	_read_dht11	;wreg free
   418   00032A  6E0E               	movwf	_rh_byte2^0,c
   419                           
   420                           ;main.c: 154:             t_byte1 = read_dht11();
   421   00032C  ECE6  F001         	call	_read_dht11	;wreg free
   422   000330  6E11               	movwf	_t_byte1^0,c
   423                           
   424                           ;main.c: 155:             t_byte2 = read_dht11();
   425   000332  ECE6  F001         	call	_read_dht11	;wreg free
   426   000336  6E10               	movwf	_t_byte2^0,c
   427                           
   428                           ;main.c: 156:             sum = read_dht11();
   429   000338  ECE6  F001         	call	_read_dht11	;wreg free
   430   00033C  6E0D               	movwf	_sum^0,c
   431   00033E                     
   432                           ;main.c: 158:             if(sum == ((rh_byte1 + rh_byte2 + t_byte1 + t_byte2)))
   433   00033E  500D               	movf	_sum^0,w,c
   434   000340  6E05               	movwf	??_main^0,c
   435   000342  6A06               	clrf	(??_main+1)^0,c
   436   000344  500E               	movf	_rh_byte2^0,w,c
   437   000346  C00F  F007         	movff	_rh_byte1,??_main+2
   438   00034A  6A08               	clrf	(??_main+3)^0,c
   439   00034C  2607               	addwf	(??_main+2)^0,f,c
   440   00034E  0E00               	movlw	0
   441   000350  2208               	addwfc	(??_main+3)^0,f,c
   442   000352  5011               	movf	_t_byte1^0,w,c
   443   000354  2607               	addwf	(??_main+2)^0,f,c
   444   000356  0E00               	movlw	0
   445   000358  2208               	addwfc	(??_main+3)^0,f,c
   446   00035A  5010               	movf	_t_byte2^0,w,c
   447   00035C  2607               	addwf	(??_main+2)^0,f,c
   448   00035E  0E00               	movlw	0
   449   000360  2208               	addwfc	(??_main+3)^0,f,c
   450   000362  5005               	movf	??_main^0,w,c
   451   000364  1807               	xorwf	(??_main+2)^0,w,c
   452   000366  E107               	bnz	u101
   453   000368  5006               	movf	(??_main+1)^0,w,c
   454   00036A  1808               	xorwf	(??_main+3)^0,w,c
   455   00036C  A4D8               	btfss	status,2,c
   456   00036E  EFBB  F001         	goto	u101
   457   000372  EFBD  F001         	goto	u100
   458   000376                     u101:
   459   000376  EFC1  F001         	goto	l54
   460   00037A                     u100:
   461   00037A                     
   462                           ;main.c: 159:              {;main.c: 160:                 TEMP = t_byte1;
   463   00037A  C011  F00B         	movff	_t_byte1,_TEMP
   464                           
   465                           ;main.c: 161:                 RH = rh_byte1;
   466   00037E  C00F  F00C         	movff	_rh_byte1,_RH
   467   000382                     l54:
   468                           
   469                           ;main.c: 164:             PORTBbits.RB0 = 0;
   470   000382  9081               	bcf	129,0,c	;volatile
   471                           
   472                           ;main.c: 165:             temp1 = (int)TEMP;
   473   000384  C00B  F009         	movff	_TEMP,main@temp1
   474   000388  6A0A               	clrf	(main@temp1+1)^0,c
   475   00038A                     l793:
   476                           
   477                           ;main.c: 168:         if (temp1 >= 28)
   478   00038A  BE0A               	btfsc	(main@temp1+1)^0,7,c
   479   00038C  EFD1  F001         	goto	u111
   480   000390  500A               	movf	(main@temp1+1)^0,w,c
   481   000392  E109               	bnz	u110
   482   000394  0E1C               	movlw	28
   483   000396  5C09               	subwf	main@temp1^0,w,c
   484   000398  A0D8               	btfss	status,0,c
   485   00039A  EFD1  F001         	goto	u111
   486   00039E  EFD3  F001         	goto	u110
   487   0003A2                     u111:
   488   0003A2  EFD6  F001         	goto	l55
   489   0003A6                     u110:
   490   0003A6                     
   491                           ;main.c: 169:         {;main.c: 170:             PORTBbits.RB4 = 1;
   492   0003A6  8881               	bsf	129,4,c	;volatile
   493                           
   494                           ;main.c: 171:         }
   495   0003A8  EFD7  F001         	goto	l797
   496   0003AC                     l55:
   497                           
   498                           ;main.c: 173:         {;main.c: 174:             PORTBbits.RB4 = 0;
   499   0003AC  9881               	bcf	129,4,c	;volatile
   500   0003AE                     l797:
   501                           
   502                           ;main.c: 177:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   503   0003AE  0E0B               	movlw	11
   504   0003B0  6E06               	movwf	(??_main+1)^0,c
   505   0003B2  0E26               	movlw	38
   506   0003B4  6E05               	movwf	??_main^0,c
   507   0003B6  0E5E               	movlw	94
   508   0003B8                     u127:
   509   0003B8  2EE8               	decfsz	wreg,f,c
   510   0003BA  D7FE               	bra	u127
   511   0003BC  2E05               	decfsz	??_main^0,f,c
   512   0003BE  D7FC               	bra	u127
   513   0003C0  2E06               	decfsz	(??_main+1)^0,f,c
   514   0003C2  D7FA               	bra	u127
   515   0003C4  EF84  F001         	goto	l781
   516   0003C8  EF00  F000         	goto	start
   517   0003CC                     __end_of_main:
   518                           	callstack 0
   519                           
   520 ;; *************** function _start_DHT11 *****************
   521 ;; Defined at:
   522 ;;		line 83 in file "main.c"
   523 ;; Parameters:    Size  Location     Type
   524 ;;		None
   525 ;; Auto vars:     Size  Location     Type
   526 ;;		None
   527 ;; Return value:  Size  Location     Type
   528 ;;                  1    wreg      void 
   529 ;; Registers used:
   530 ;;		wreg
   531 ;; Tracked objects:
   532 ;;		On entry : 0/0
   533 ;;		On exit  : 0/0
   534 ;;		Unchanged: 0/0
   535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   536 ;;      Params:         0       0       0       0
   537 ;;      Locals:         0       0       0       0
   538 ;;      Temps:          1       0       0       0
   539 ;;      Totals:         1       0       0       0
   540 ;;Total ram usage:        1 bytes
   541 ;; Hardware stack levels used: 1
   542 ;; This function calls:
   543 ;;		Nothing
   544 ;; This function is called by:
   545 ;;		_main
   546 ;; This function uses a non-reentrant model
   547 ;;
   548                           
   549                           	psect	text1
   550   000494                     __ptext1:
   551                           	callstack 0
   552   000494                     _start_DHT11:
   553                           	callstack 30
   554   000494                     
   555                           ;main.c: 85:     TRISBbits.TRISB3 = 0;
   556   000494  9693               	bcf	147,3,c	;volatile
   557                           
   558                           ;main.c: 87:     LATBbits.LATB3 = 0;
   559   000496  968A               	bcf	138,3,c	;volatile
   560   000498                     
   561                           ;main.c: 88:     _delay((unsigned long)((18)*(8000000/4000.0)));
   562   000498  0E2F               	movlw	47
   563   00049A  6E01               	movwf	??_start_DHT11^0,c
   564   00049C  0EC0               	movlw	192
   565   00049E                     u137:
   566   00049E  2EE8               	decfsz	wreg,f,c
   567   0004A0  D7FE               	bra	u137
   568   0004A2  2E01               	decfsz	??_start_DHT11^0,f,c
   569   0004A4  D7FC               	bra	u137
   570   0004A6                     
   571                           ;main.c: 89:     LATBbits.LATB3 = 1;
   572   0004A6  868A               	bsf	138,3,c	;volatile
   573                           
   574                           ;main.c: 90:     _delay((unsigned long)((40)*(8000000/4000000.0)));
   575   0004A8  0E1A               	movlw	26
   576   0004AA                     u147:
   577   0004AA  2EE8               	decfsz	wreg,f,c
   578   0004AC  D7FE               	bra	u147
   579   0004AE  D000               	nop2	
   580   0004B0                     
   581                           ;main.c: 91:     TRISBbits.TRISB3 = 1;
   582   0004B0  8693               	bsf	147,3,c	;volatile
   583   0004B2  0012               	return		;funcret
   584   0004B4                     __end_of_start_DHT11:
   585                           	callstack 0
   586                           
   587 ;; *************** function _read_dht11 *****************
   588 ;; Defined at:
   589 ;;		line 114 in file "main.c"
   590 ;; Parameters:    Size  Location     Type
   591 ;;		None
   592 ;; Auto vars:     Size  Location     Type
   593 ;;  for_count       1    3[COMRAM] unsigned char 
   594 ;;  data            1    2[COMRAM] unsigned char 
   595 ;; Return value:  Size  Location     Type
   596 ;;                  1    wreg      unsigned char 
   597 ;; Registers used:
   598 ;;		wreg, status,2, status,0
   599 ;; Tracked objects:
   600 ;;		On entry : 0/0
   601 ;;		On exit  : 0/0
   602 ;;		Unchanged: 0/0
   603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   604 ;;      Params:         0       0       0       0
   605 ;;      Locals:         2       0       0       0
   606 ;;      Temps:          2       0       0       0
   607 ;;      Totals:         4       0       0       0
   608 ;;Total ram usage:        4 bytes
   609 ;; Hardware stack levels used: 1
   610 ;; This function calls:
   611 ;;		Nothing
   612 ;; This function is called by:
   613 ;;		_main
   614 ;; This function uses a non-reentrant model
   615 ;;
   616                           
   617                           	psect	text2
   618   0003CC                     __ptext2:
   619                           	callstack 0
   620   0003CC                     _read_dht11:
   621                           	callstack 30
   622   0003CC                     
   623                           ;main.c: 116:     char data = 0, for_count;
   624   0003CC  6A03               	clrf	read_dht11@data^0,c
   625                           
   626                           ;main.c: 118:     for(for_count = 0; for_count < 8; for_count++)
   627   0003CE  6A04               	clrf	read_dht11@for_count^0,c
   628   0003D0                     l39:
   629   0003D0  A681               	btfss	129,3,c	;volatile
   630   0003D2  EFED  F001         	goto	u31
   631   0003D6  EFEF  F001         	goto	u30
   632   0003DA                     u31:
   633   0003DA  EFE8  F001         	goto	l39
   634   0003DE                     u30:
   635   0003DE                     
   636                           ;main.c: 121:        _delay((unsigned long)((30)*(8000000/4000000.0)));
   637   0003DE  0E14               	movlw	20
   638   0003E0                     u157:
   639   0003E0  2EE8               	decfsz	wreg,f,c
   640   0003E2  D7FE               	bra	u157
   641   0003E4                     
   642                           ;main.c: 122:        if(PORTBbits.RB3 == 0)
   643   0003E4  B681               	btfsc	129,3,c	;volatile
   644   0003E6  EFF7  F001         	goto	u41
   645   0003EA  EFF9  F001         	goto	u40
   646   0003EE                     u41:
   647   0003EE  EF0B  F002         	goto	l769
   648   0003F2                     u40:
   649   0003F2                     
   650                           ;main.c: 123:        {;main.c: 124:            data&= ~(1<<(7 - for_count));
   651   0003F2  5004               	movf	read_dht11@for_count^0,w,c
   652   0003F4  0807               	sublw	7
   653   0003F6  6E01               	movwf	??_read_dht11^0,c
   654   0003F8  0E01               	movlw	1
   655   0003FA  6E02               	movwf	(??_read_dht11+1)^0,c
   656   0003FC  2A01               	incf	??_read_dht11^0,f,c
   657   0003FE  EF03  F002         	goto	u54
   658   000402                     u55:
   659   000402  90D8               	bcf	status,0,c
   660   000404  3602               	rlcf	(??_read_dht11+1)^0,f,c
   661   000406                     u54:
   662   000406  2E01               	decfsz	??_read_dht11^0,f,c
   663   000408  EF01  F002         	goto	u55
   664   00040C  5002               	movf	(??_read_dht11+1)^0,w,c
   665   00040E  0AFF               	xorlw	255
   666   000410  1603               	andwf	read_dht11@data^0,f,c
   667                           
   668                           ;main.c: 125:        }
   669   000412  EF21  F002         	goto	l771
   670   000416                     l769:
   671                           
   672                           ;main.c: 127:        {;main.c: 128:            data|= (1 << (7 - for_count));
   673   000416  5004               	movf	read_dht11@for_count^0,w,c
   674   000418  0807               	sublw	7
   675   00041A  6E01               	movwf	??_read_dht11^0,c
   676   00041C  0E01               	movlw	1
   677   00041E  6E02               	movwf	(??_read_dht11+1)^0,c
   678   000420  2A01               	incf	??_read_dht11^0,f,c
   679   000422  EF15  F002         	goto	u64
   680   000426                     u65:
   681   000426  90D8               	bcf	status,0,c
   682   000428  3602               	rlcf	(??_read_dht11+1)^0,f,c
   683   00042A                     u64:
   684   00042A  2E01               	decfsz	??_read_dht11^0,f,c
   685   00042C  EF13  F002         	goto	u65
   686   000430  5002               	movf	(??_read_dht11+1)^0,w,c
   687   000432  1203               	iorwf	read_dht11@data^0,f,c
   688   000434                     l44:
   689   000434  B681               	btfsc	129,3,c	;volatile
   690   000436  EF1F  F002         	goto	u71
   691   00043A  EF21  F002         	goto	u70
   692   00043E                     u71:
   693   00043E  EF1A  F002         	goto	l44
   694   000442                     u70:
   695   000442                     l771:
   696                           
   697                           ;main.c: 131:     }
   698   000442  2A04               	incf	read_dht11@for_count^0,f,c
   699   000444  0E07               	movlw	7
   700   000446  6404               	cpfsgt	read_dht11@for_count^0,c
   701   000448  EF28  F002         	goto	u81
   702   00044C  EF2A  F002         	goto	u80
   703   000450                     u81:
   704   000450  EFE8  F001         	goto	l39
   705   000454                     u80:
   706   000454                     
   707                           ;main.c: 132:     return data;
   708   000454  5003               	movf	read_dht11@data^0,w,c
   709   000456  0012               	return		;funcret
   710   000458                     __end_of_read_dht11:
   711                           	callstack 0
   712                           
   713 ;; *************** function _check_DHT11 *****************
   714 ;; Defined at:
   715 ;;		line 96 in file "main.c"
   716 ;; Parameters:    Size  Location     Type
   717 ;;		None
   718 ;; Auto vars:     Size  Location     Type
   719 ;;		None
   720 ;; Return value:  Size  Location     Type
   721 ;;                  1    wreg      void 
   722 ;; Registers used:
   723 ;;		wreg, status,2
   724 ;; Tracked objects:
   725 ;;		On entry : 0/0
   726 ;;		On exit  : 0/0
   727 ;;		Unchanged: 0/0
   728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   729 ;;      Params:         0       0       0       0
   730 ;;      Locals:         0       0       0       0
   731 ;;      Temps:          0       0       0       0
   732 ;;      Totals:         0       0       0       0
   733 ;;Total ram usage:        0 bytes
   734 ;; Hardware stack levels used: 1
   735 ;; This function calls:
   736 ;;		Nothing
   737 ;; This function is called by:
   738 ;;		_main
   739 ;; This function uses a non-reentrant model
   740 ;;
   741                           
   742                           	psect	text3
   743   000458                     __ptext3:
   744                           	callstack 0
   745   000458                     _check_DHT11:
   746                           	callstack 30
   747   000458                     
   748                           ;main.c: 98:     check = 0;
   749   000458  6A12               	clrf	_check^0,c
   750   00045A                     
   751                           ;main.c: 100:     _delay((unsigned long)((40)*(8000000/4000000.0)));
   752   00045A  0E1A               	movlw	26
   753   00045C                     u167:
   754   00045C  2EE8               	decfsz	wreg,f,c
   755   00045E  D7FE               	bra	u167
   756   000460  D000               	nop2	
   757   000462                     
   758                           ;main.c: 101:     if(PORTBbits.RB3 == 0)
   759   000462  B681               	btfsc	129,3,c	;volatile
   760   000464  EF36  F002         	goto	u11
   761   000468  EF38  F002         	goto	u10
   762   00046C                     u11:
   763   00046C  EF49  F002         	goto	l34
   764   000470                     u10:
   765   000470                     
   766                           ;main.c: 102:     {;main.c: 103:         _delay((unsigned long)((80)*(8000000/4000000.0)
      +                          ));
   767   000470  0E35               	movlw	53
   768   000472                     u177:
   769   000472  2EE8               	decfsz	wreg,f,c
   770   000474  D7FE               	bra	u177
   771   000476  0000               	nop	
   772   000478                     
   773                           ;main.c: 104:         if(PORTBbits.RB3 == 1)
   774   000478  A681               	btfss	129,3,c	;volatile
   775   00047A  EF41  F002         	goto	u21
   776   00047E  EF43  F002         	goto	u20
   777   000482                     u21:
   778   000482  EF49  F002         	goto	l34
   779   000486                     u20:
   780   000486                     
   781                           ;main.c: 105:         {;main.c: 106:             check = 1;
   782   000486  0E01               	movlw	1
   783   000488  6E12               	movwf	_check^0,c
   784   00048A                     
   785                           ;main.c: 107:             _delay((unsigned long)((80)*(8000000/4000000.0)));
   786   00048A  0E35               	movlw	53
   787   00048C                     u187:
   788   00048C  2EE8               	decfsz	wreg,f,c
   789   00048E  D7FE               	bra	u187
   790   000490  0000               	nop	
   791   000492                     l34:
   792   000492  0012               	return		;funcret
   793   000494                     __end_of_check_DHT11:
   794                           	callstack 0
   795                           
   796                           	psect	smallconst
   797   000300                     __psmallconst:
   798                           	callstack 0
   799   000300  00                 	db	0
   800   000301  00                 	db	0	; dummy byte at the end
   801   000000                     __activetblptr  equ	0
   802                           
   803                           	psect	rparam
   804   000001                     ___rparam_used  equ	1
   805   000000                     ___param_bank   equ	0
   806   000000                     __Lparam        equ	__Lrparam
   807   000000                     __Hparam        equ	__Hrparam
   808                           
   809                           	psect	config
   810                           
   811                           ; Padding undefined space
   812   300000                     	org	3145728
   813   300000  FF                 	db	255
   814                           
   815                           ;Config register CONFIG1H @ 0x300001
   816                           ;	Oscillator Selection bits
   817                           ;	OSC = HS, HS oscillator
   818                           ;	Fail-Safe Clock Monitor Enable bit
   819                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
   820                           ;	Internal External Oscillator Switchover bit
   821                           ;	IESO = ON, Internal External Switchover mode enabled
   822   300001                     	org	3145729
   823   300001  C2                 	db	194
   824                           
   825                           ;Config register CONFIG2L @ 0x300002
   826                           ;	Power-up Timer Enable bit
   827                           ;	PWRTEN = ON, PWRT enabled
   828                           ;	Brown-out Reset Enable bits
   829                           ;	BOREN = OFF, Brown-out Reset disabled
   830                           ;	Brown Out Reset Voltage bits
   831                           ;	BORV = 0x3, unprogrammed default
   832   300002                     	org	3145730
   833   300002  0C                 	db	12
   834                           
   835                           ;Config register CONFIG2H @ 0x300003
   836                           ;	Watchdog Timer Enable bit
   837                           ;	WDTEN = OFF, WDT disabled (control is placed on the SWDTEN bit)
   838                           ;	Watchdog Timer Postscale Select bits
   839                           ;	WDPS = 32768, 1:32768
   840                           ;	Watchdog Timer Window Enable bit
   841                           ;	WINEN = OFF, WDT window disabled
   842   300003                     	org	3145731
   843   300003  3E                 	db	62
   844                           
   845                           ;Config register CONFIG3L @ 0x300004
   846                           ;	PWM output pins Reset state control
   847                           ;	PWMPIN = OFF, PWM outputs disabled upon Reset (default)
   848                           ;	Low-Side Transistors Polarity
   849                           ;	LPOL = HIGH, PWM0, 2, 4 and 6 are active-high
   850                           ;	High-Side Transistors Polarity
   851                           ;	HPOL = HIGH, PWM1, 3, 5 and 7 are active-high
   852                           ;	Timer1 Oscillator MUX
   853                           ;	T1OSCMX = ON, Low-power Timer1 operation when microcontroller is in Sleep mode
   854   300004                     	org	3145732
   855   300004  3C                 	db	60
   856                           
   857                           ;Config register CONFIG3H @ 0x300005
   858                           ;	MCLR Pin Enable bit
   859                           ;	MCLRE = ON, Enabled
   860   300005                     	org	3145733
   861   300005  9D                 	db	157
   862                           
   863                           ;Config register CONFIG4L @ 0x300006
   864                           ;	Stack Full/Underflow Reset Enable bit
   865                           ;	STVREN = ON, Stack full/underflow will cause Reset
   866                           ;	Low-Voltage ICSP Enable bit
   867                           ;	LVP = ON, Low-voltage ICSP enabled
   868                           ;	Background Debugger Enable bit
   869                           ;	DEBUG = 0x1, unprogrammed default
   870   300006                     	org	3145734
   871   300006  85                 	db	133
   872                           
   873                           ; Padding undefined space
   874   300007                     	org	3145735
   875   300007  FF                 	db	255
   876                           
   877                           ;Config register CONFIG5L @ 0x300008
   878                           ;	Code Protection bit
   879                           ;	CP0 = OFF, Block 0 (000200-000FFFh) not code-protected
   880                           ;	Code Protection bit
   881                           ;	CP1 = OFF, Block 1 (001000-001FFF) not code-protected
   882                           ;	Code Protection bit
   883                           ;	CP2 = OFF, Block 2 (002000-002FFFh) not code-protected
   884                           ;	Code Protection bit
   885                           ;	CP3 = OFF, Block 3 (003000-003FFFh) not code-protected
   886   300008                     	org	3145736
   887   300008  0F                 	db	15
   888                           
   889                           ;Config register CONFIG5H @ 0x300009
   890                           ;	Boot Block Code Protection bit
   891                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code-protected
   892                           ;	Data EEPROM Code Protection bit
   893                           ;	CPD = OFF, Data EEPROM not code-protected
   894   300009                     	org	3145737
   895   300009  C0                 	db	192
   896                           
   897                           ;Config register CONFIG6L @ 0x30000A
   898                           ;	Write Protection bit
   899                           ;	WRT0 = OFF, Block 0 (000200-000FFFh) not write-protected
   900                           ;	Write Protection bit
   901                           ;	WRT1 = OFF, Block 1 (001000-001FFF) not write-protected
   902                           ;	Write Protection bit
   903                           ;	WRT2 = OFF, Block 2 (002000-002FFFh) not write-protected
   904                           ;	Write Protection bit
   905                           ;	WRT3 = OFF, Block 3 (003000-003FFFh) not write-protected
   906   30000A                     	org	3145738
   907   30000A  0F                 	db	15
   908                           
   909                           ;Config register CONFIG6H @ 0x30000B
   910                           ;	Configuration Register Write Protection bit
   911                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
   912                           ;	Boot Block Write Protection bit
   913                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write-protected
   914                           ;	Data EEPROM Write Protection bit
   915                           ;	WRTD = OFF, Data EEPROM not write-protected
   916   30000B                     	org	3145739
   917   30000B  E0                 	db	224
   918                           
   919                           ;Config register CONFIG7L @ 0x30000C
   920                           ;	Table Read Protection bit
   921                           ;	EBTR0 = OFF, Block 0 (000200-000FFFh) not protected from table reads executed in other
      +                           blocks
   922                           ;	Table Read Protection bit
   923                           ;	EBTR1 = OFF, Block 1 (001000-001FFF) not protected from table reads executed in other 
      +                          blocks
   924                           ;	Table Read Protection bit
   925                           ;	EBTR2 = OFF, Block 2 (002000-002FFFh) not protected from table reads executed in other
      +                           blocks
   926                           ;	Table Read Protection bit
   927                           ;	EBTR3 = OFF, Block 3 (003000-003FFFh) not protected from table reads executed in other
      +                           blocks
   928   30000C                     	org	3145740
   929   30000C  0F                 	db	15
   930                           
   931                           ;Config register CONFIG7H @ 0x30000D
   932                           ;	Boot Block Table Read Protection bit
   933                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from table reads executed in ot
      +                          her blocks
   934   30000D                     	org	3145741
   935   30000D  40                 	db	64
   936                           tosu	equ	0xFFF
   937                           tosh	equ	0xFFE
   938                           tosl	equ	0xFFD
   939                           stkptr	equ	0xFFC
   940                           pclatu	equ	0xFFB
   941                           pclath	equ	0xFFA
   942                           pcl	equ	0xFF9
   943                           tblptru	equ	0xFF8
   944                           tblptrh	equ	0xFF7
   945                           tblptrl	equ	0xFF6
   946                           tablat	equ	0xFF5
   947                           prodh	equ	0xFF4
   948                           prodl	equ	0xFF3
   949                           indf0	equ	0xFEF
   950                           postinc0	equ	0xFEE
   951                           postdec0	equ	0xFED
   952                           preinc0	equ	0xFEC
   953                           plusw0	equ	0xFEB
   954                           fsr0h	equ	0xFEA
   955                           fsr0l	equ	0xFE9
   956                           wreg	equ	0xFE8
   957                           indf1	equ	0xFE7
   958                           postinc1	equ	0xFE6
   959                           postdec1	equ	0xFE5
   960                           preinc1	equ	0xFE4
   961                           plusw1	equ	0xFE3
   962                           fsr1h	equ	0xFE2
   963                           fsr1l	equ	0xFE1
   964                           bsr	equ	0xFE0
   965                           indf2	equ	0xFDF
   966                           postinc2	equ	0xFDE
   967                           postdec2	equ	0xFDD
   968                           preinc2	equ	0xFDC
   969                           plusw2	equ	0xFDB
   970                           fsr2h	equ	0xFDA
   971                           fsr2l	equ	0xFD9
   972                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     10      18
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_read_dht11

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0      90
                                              4 COMRAM     6     6      0
                        _check_DHT11
                         _read_dht11
                        _start_DHT11
 ---------------------------------------------------------------------------------
 (1) _start_DHT11                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_dht11                                           4     4      0      75
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _check_DHT11                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _check_DHT11
   _read_dht11
   _start_DHT11

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             767      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           160      0       0      0.0%
BANK0              160      0       0      0.0%
BITBIGSFRh         126      0       0      0.0%
BITCOMRAM           95      0       0      0.0%
COMRAM              95     10      18     18.9%
BITBIGSFRl          33      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      18      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sun Mar 02 17:23:55 2025

            _start_DHT11 0494                       l34 0492                       l44 0434  
                     l29 04B2                       l54 0382                       l47 0456  
                     l39 03D0                       l55 03AC                       u10 0470  
                     u11 046C                       u20 0486                       _RH 000C  
                     u21 0482                       u30 03DE                       u31 03DA  
                     u40 03F2                       u41 03EE                       u70 0442  
                     u54 0406                       u71 043E                       u55 0402  
                     u80 0454                       u64 042A                       u81 0450  
                     u65 0426                       u90 0320                       u91 031C  
                    l741 04B0                      l751 0478                      l743 0458  
                    l735 0494                      l753 0486                      l745 045A  
                    l737 0498                      l755 048A                      l747 0462  
                    l771 0442                      l763 03DE                      l739 04A6  
                    l749 0470                      l773 0444                      l765 03E4  
                    l757 03CC                      l781 0308                      l775 0454  
                    l767 03F2                      l791 037A                      l783 030C  
                    l769 0416                      l793 038A                      l785 0310  
                    l795 03A6                      l787 0320                      l779 0302  
                    l797 03AE                      l789 033E                      u100 037A  
                    u101 0376                      u110 03A6                      u111 03A2  
                    u127 03B8                      u137 049E                      u147 04AA  
                    u157 03E0                      u167 045C                      u177 0472  
                    u187 048C                      _sum 000D                      wreg 0FE8  
                   _TEMP 000B                     _main 0302                     start 0000  
           ___param_bank 0000                    ?_main 0001                    _check 0012  
                  status 0FD8          __initialization 04B4             __end_of_main 03CC  
                 ??_main 0005            __activetblptr 0000                   _ADCON0 0FC2  
                 clear_0 04BA                   isa$std 0001             __mediumconst 0000  
             __accesstop 0060  __end_of__initialization 04C0            ___rparam_used 0001  
         __pcstackCOMRAM 0001             ?_start_DHT11 0001                  __Hparam 0000  
                __Lparam 0000            ??_check_DHT11 0001             __psmallconst 0300  
             _read_dht11 03CC                  __pcinit 04B4                  __ramtop 0300  
                __ptext0 0302                  __ptext1 0494                  __ptext2 03CC  
                __ptext3 0458                  _t_byte1 0011                  _t_byte2 0010  
   end_of_initialization 04C0                  postinc0 0FEE                _PORTBbits 0F81  
    __end_of_check_DHT11 0494                _TRISBbits 0F93              ?_read_dht11 0001  
    start_initialization 04B4              _check_DHT11 0458      read_dht11@for_count 0004  
            __pbssCOMRAM 000B              __smallconst 0300                 _LATBbits 0F8A  
              main@temp1 0009           read_dht11@data 0003                 __Hrparam 0000  
               __Lrparam 0000            ??_start_DHT11 0001             ??_read_dht11 0001  
     __end_of_read_dht11 0458                 _rh_byte1 000F                 _rh_byte2 000E  
               isa$xinst 0000             ?_check_DHT11 0001      __end_of_start_DHT11 04B4  
